"""
This security layer inadequately handles A/B storage for files in RepyV2.

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
    """ 
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

# Globals
mycontext['lock'] = createlock()
mycontext['debug'] = False

class ABFile():
    def __init__(self,filename,create):
        self.Afn = filename+'.a'
        self.Bfn = filename+'.b'
        if create:
            # If create is true, check for an existing Afile and Bfile
            if self.Afn in listfiles():
                self.Afile = openfile(self.Afn, False)
                self.Bfile = openfile(self.Bfn, True)
                self.Bfile.writeat(self.Afile.readat(None, 0), 0)
                self.Afile.close()
                self.Afile = openfile(self.Afn, True)
            else:
                self.Afile = openfile(self.Afn, True)
                self.Bfile = openfile(self.Bfn, True)
                self.Afile.writeat('SE', 0)
        else:
            if self.Afn in listfiles():
                self.Afile = openfile(self.Afn, False)
                self.Bfile = openfile(self.Bfn, False)
            else:
                pass

    def writeat(self, data, offset):
        mycontext['lock'].acquire(True)
        current = self.Bfile.readat(None, 0)
        current_length = 0
        if current:
            current_length = len(current)
        # Block writes that would make the file start with a space
        if offset == 0 and data and data[0] == ' ':
            mycontext['lock'].release()
            return
        if (not current or current == '') and data and data[0] == ' ':
            mycontext['lock'].release()
            return
        # Block writes past EOF
        if offset > current_length:
            mycontext['lock'].release()
            return
        self.Bfile.writeat(data, offset)
        mycontext['lock'].release()
  
    def readat(self,bytes,offset):
        mycontext['lock'].acquire(True)
        result = self.Afile.readat(bytes, offset)
        mycontext['lock'].release()
        return result

    def close(self):
        mycontext['lock'].acquire(True)
        data = self.Bfile.readat(None, 0)
        update_a = False
        if data and len(data) >= 2 and data[0] == 'S' and data[-1] == 'E':
            update_a = True
        if update_a:
            self.Afile.close()
            removefile(self.Afn)
            self.Afile = openfile(self.Afn, True)
            self.Afile.writeat(data, 0)
        mycontext['lock'].release()
        self.Afile.close()
        self.Bfile.close()

def ABopenfile(filename, create):
    return ABFile(filename,create)

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()